cmake_minimum_required(VERSION 3.26)
PROJECT(FINAL)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
set(CMAKE_EXE_LINKER_FLAGS "-static")

include_directories(inc)
aux_source_directory(src src_list)
message("BUILD RUNNING LIBRARY")
add_library(runninglib ${src_list})
add_executable(trajTest trajTest.cpp)
add_executable(jacobTest jacobTest.cpp)
if (DEFINED ENV{isSocket})
    message("socket needed")
    add_executable(Lib_Demo main.cpp ${src_list})
    target_link_libraries(Lib_Demo ws2_32 ${PROJECT_SOURCE_DIR}/lib/TcAdsDll.lib runninglib ${PROJECT_SOURCE_DIR}/lib/lib_win64/libopenblas.lib)
    add_executable(SAFE-CHECK safeCheck.cpp ${src_list})
    target_link_libraries(SAFE-CHECK ws2_32 ${PROJECT_SOURCE_DIR}/lib/TcAdsDll.lib ${PROJECT_SOURCE_DIR}/lib/lib_win64/libopenblas.lib)
endif ()
if (DEFINED ENV{isNoSocket} )
    message("build no socket program target")
    add_compile_definitions(libtest)
    add_executable(SAFE-CHECK safeCheck.cpp ${src_list})
    target_link_libraries(SAFE-CHECK ws2_32 ${PROJECT_SOURCE_DIR}/lib/TcAdsDll.lib ${PROJECT_SOURCE_DIR}/lib/lib_win64/libopenblas.lib)
    add_executable(noSocketMain main_Nosocket.cpp ${src_list})
    target_link_libraries(noSocketMain ws2_32 ${PROJECT_SOURCE_DIR}/lib/TcAdsDll.lib runninglib ${PROJECT_SOURCE_DIR}/lib/lib_win64/libopenblas.lib)
endif ()
if (DEFINED ENV{socketTest})
    message("This is SocketTest!")
    add_compile_definitions(SOCKET_TEST)
    add_executable(SocketTest vs_Low.cpp)
    target_link_libraries(SocketTest ws2_32 ${PROJECT_SOURCE_DIR}/lib/TcAdsDll.lib)
endif ()
target_link_libraries(jacobTest ${PROJECT_SOURCE_DIR}/lib/lib_win64/libopenblas.lib)

file(COPY lib/lib_win64/libopenblas.dll DESTINATION ${PROJECT_BINARY_DIR})
#project(VISUAL)
if (DEFINED ENV{OPENCV_NEEDED})
    set(OpenCV_DIR C:\\opencv\\openCVlocalBuild\\sources\\opencv-4.x\\opencv-4.x\\build)
    find_package(OpenCV)
    if (OpenCV_FOUND)
        include_directories(${OpenCV_INCLUDE_DIRS})
        message("opencv dirs is ${OpenCV_INCLUDE_DIRS}")
        add_executable(VISUAL visualTest.cpp)
        set(OpenCV_LIBS opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs)
        target_link_libraries(VISUAL ${PROJECT_SOURCE_DIR}/lib/DVPCamera64.lib ${OpenCV_LIBS})
    else ()
        message("NOT FOUND OPENCV")
    endif ()
endif ()